// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	services "github.com/AndreyAD1/spaceship/internal/services"
	mock "github.com/stretchr/testify/mock"
)

// ScreenSvc is an autogenerated mock type for the ScreenSvc type
type ScreenSvc struct {
	mock.Mock
}

// ClearScreen provides a mock function with given fields:
func (_m *ScreenSvc) ClearScreen() {
	_m.Called()
}

// Draw provides a mock function with given fields: obj
func (_m *ScreenSvc) Draw(obj services.ScreenObject) {
	_m.Called(obj)
}

// Exit provides a mock function with given fields:
func (_m *ScreenSvc) Exit() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Finish provides a mock function with given fields:
func (_m *ScreenSvc) Finish() {
	_m.Called()
}

// GetControlEvent provides a mock function with given fields:
func (_m *ScreenSvc) GetControlEvent() services.ScreenEvent {
	ret := _m.Called()

	var r0 services.ScreenEvent
	if rf, ok := ret.Get(0).(func() services.ScreenEvent); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(services.ScreenEvent)
	}

	return r0
}

// GetObjectList provides a mock function with given fields:
func (_m *ScreenSvc) NewObjectList() [][][]services.ScreenObject {
	ret := _m.Called()

	var r0 [][][]services.ScreenObject
	if rf, ok := ret.Get(0).(func() [][][]services.ScreenObject); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][][]services.ScreenObject)
		}
	}

	return r0
}

// GetScreenSize provides a mock function with given fields:
func (_m *ScreenSvc) GetScreenSize() (int, int) {
	ret := _m.Called()

	var r0 int
	var r1 int
	if rf, ok := ret.Get(0).(func() (int, int)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// IsInsideScreen provides a mock function with given fields: x, y
func (_m *ScreenSvc) IsInsideScreen(x float64, y float64) bool {
	ret := _m.Called(x, y)

	var r0 bool
	if rf, ok := ret.Get(0).(func(float64, float64) bool); ok {
		r0 = rf(x, y)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PollScreenEvents provides a mock function with given fields: ctx
func (_m *ScreenSvc) PollScreenEvents(ctx context.Context) {
	_m.Called(ctx)
}

// ShowScreen provides a mock function with given fields:
func (_m *ScreenSvc) ShowScreen() {
	_m.Called()
}

type mockConstructorTestingTNewScreenSvc interface {
	mock.TestingT
	Cleanup(func())
}

// NewScreenSvc creates a new instance of ScreenSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScreenSvc(t mockConstructorTestingTNewScreenSvc) *ScreenSvc {
	mock := &ScreenSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
